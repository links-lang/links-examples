# This module is responsible for gathering user answers to the questions contained in a survey which ID is passed as HTML parameter. At the end all the data are stored in a database (supposing that user finishes filling out the survey).

# Variables used in database operations.

var db = database "surveybuilder";

var readysurveys =
    table "surveys"
    with (id : Int,
	  name : String,
	  textareasno : Int,
      redirection : String,
      welcome : String,
      timetofill : Int
    	  ) from db;

var textareas =
    table "textareas"
    with (
      id : Int,
	  surveyid : Int,
	  questioncontent : String
    	  ) from db;

var respondents =
	table "surveyrespondents"
	with (
	surveyid : Int,
	name : String
	) from db;

var readyrespondents = 
	table "surveyrespondents"
	with (
	id : Int,
	surveyid : Int,
	name : String
	) from db;

var textareaentries =
	table "textareaentries"
	with (
	textareaid : Int,
	respondendid : Int,
	answer : String
	) from db;

var readycheckboxquestions = 
    table "checkboxquestions"
    with (
    id : Int,
    surveyid : Int,
    checkboxcontent : String
    ) from db;

var readycheckboxoptions = 
    table "checkboxoptions"
    with (
    id : Int,
    questionid : Int,
    optioncontent : String
    ) from db;

var checkboxdbentries =
    table "checkboxentries"
    with (
    optionid : Int,
    respondendid : Int,
    optionvalue : Int
    ) from db;

fun insertsinglerowTA(r,rid)
{
	insert textareaentries
	values [(textareaid=r.id, respondendid=rid, answer=r.answer)];
	()
}

fun insertSingleCbEntry(optionId, respondentIt, checkedornot)
{
    var asd = if(checkedornot)
    {
    insert checkboxdbentries
    values [(optionid=optionId, respondendid=respondentIt, optionvalue=1)]
    }
    else
    {
    insert checkboxdbentries
    values [(optionid=optionId, respondendid=respondentIt, optionvalue=0)]
    };
    ()
}

fun finalStep(inputValues, sName, goLink)
{

#creation of a new respondent in DB
insert respondents
values [(surveyid=inputValues.id,
	   name=inputValues.data.name
	   )];
#process of addition of entries for a new respondent in DB
var rdrspndnts = asList(readyrespondents);
var reversedrdrspndnts = reverse(rdrspndnts);
var lastone = hd(reversedrdrspndnts);
var respondentid = lastone.id;
var data = inputValues.data.listofvalues;
var someMagic = for(r <- data)
{
	insertsinglerowTA(r,respondentid);
	[]
};
var cbdata = inputValues.data.cbvalues;
var nameforfor = for (singleQuestion <- cbdata)
{
    for (singleOpt <- singleQuestion.answers)
    {
        insertSingleCbEntry(singleOpt.oid,respondentid,singleOpt.selv);
        []
    }
    
};

var go2link = if(goLink == "" || not(goLink =~ /http/))
{
    "http://www.bbc.co.uk"
}
else
{
    goLink
};

page
<html> 
 <title>SurveyFiller</title>
 <body bgcolor="#ffffff">    

 <h1>{stringToXml(sName)}</h1>
 
 <p>Your answers have been successfully stored in our database ! We would like to thank you once more for your time and effort which involved filling out this survey !</p>
 <p>The author of this survey recommends you to visit <a href="{go2link}">{stringToXml(go2link)}</a>.</p>
 <br></br><br></br>
 
 <img src="bugswavinggloveless.png" alt="" width="250" height="250"></img>
 
   
</body>				  
</html>
}

fun surveySummarize(inputData, surveyId, surveyName, goLink)
{

var finalFormlet = formlet 
				<#>
                    {
                    for(cbentry <- inputData.cbvalues)
                    {
                    <p><b>{stringToXml(cbentry.questiontxt)}</b>
                    <table>
                    {for(singleOption <- cbentry.answers)
                    {
                    if(singleOption.selv)
                    {
                    <tr><td><font color="green">{stringToXml(singleOption.otxt)}</font></td></tr>
                    }
                    else
                    {
                    <tr><td><font color="red">{stringToXml(singleOption.otxt)}</font></td></tr>
                    }
                    }
                    }
                    </table>
                    </p>
                    }
                    }
        			{
         			for(entry <- inputData.listofvalues)
         			{
         			<p><b>{stringToXml(entry.question)}</b><br></br><em>{stringToXml(entry.answer)}</em></p>
         			}
         			}
                    
         			<p>If they are correct please submit them by clicking on 'confirm' button. Otherwise go back.</p>
         			<p>{submitButton("confirm") -> submit}</p> 
               	</#> 
        yields { 
        (id = surveyId , data = inputData)
        };

page
<html> 
 <title>SurveyFiller</title>
 <body bgcolor="#ffffff">    

 <h1>{stringToXml(surveyName)}</h1>
 
 <p>Dear <b>{stringToXml(inputData.name)}</b>, thank you for completing this survey. Please revise your answers: </p>
 
 {
 	finalFormlet => fun (par) { finalStep(par, surveyName, goLink) }
 }

 <hr />
   
</body>				  
</html>
}

fun checkboxesFormlet(cboptions)
{
      if (cboptions == [])
                    formlet <#></#> yields []
                else {
                    formlet <#>
                        <tr>
                            <td> { stringToXml(hd(cboptions).qotxt) } </td>
                            <td> { checkbox -> c } </td>
                        </tr>
                        { checkboxesFormlet(tl(cboptions)) -> rest }                    
                    </#>
                    yields
                        ("otxt"=hd(cboptions).qotxt,"oid"=hd(cboptions).qoid,"selv"=c)::rest
                }
}

fun nSurveyFormlet(copt, textareaquestions, checkboxesqo)
{
    if (copt == 1)
    {   
        if(checkboxesqo == [])
        {
            formlet <#>
            { nSurveyFormlet(2,textareaquestions,[]) -> rest }  
            </#>
            yields {
            rest
        }
        }
        else
        {
            formlet <#>
            <tr><td><b>{stringToXml(hd(checkboxesqo).qname)}</b></td></tr>
            <tr class="blank_row"><td colspan="5"></td></tr>
            { checkboxesFormlet(hd(checkboxesqo).qo) -> useranswers} 
            <tr class="blank_row"><td colspan="5"></td></tr>   
            <tr class="blank_row"><td colspan="5"></td></tr>   
            <tr class="blank_row"><td colspan="5"></td></tr>   
            { nSurveyFormlet(copt,textareaquestions,tl(checkboxesqo)) -> rest }

            </#>
            yields {
            (name = rest.name, listofvalues = rest.listofvalues, cbvalues = (questiontxt = hd(checkboxesqo).qname, answers = useranswers)::rest.cbvalues)
        }
        }

    }
    else
    {
        if (textareaquestions == [])
        formlet <#>
                    <tr class="blank_row"><td colspan="5"></td></tr>
                    <tr class="blank_row"><td colspan="5"></td></tr>            
                    <tr><td><b>Your name:</b> {input -> iname}</td></tr>
                    <tr class="blank_row"><td colspan="5"></td></tr>            
                    <tr class="blank_row"><td colspan="5"></td></tr>
                    <tr><td></td></tr>
                    <tr><td>{submitButton("Next") -> submit}</td></tr> 
                </#> 
        yields { 
        (name = iname, listofvalues = [], cbvalues = [])
        }
    else {
        formlet <#>
                 <tr>
                     <td> <b> {stringToXml(hd(textareaquestions).questioncontent)} </b> </td>
                 </tr>
                 <tr>
                    <td> {textareacss("", "width: 340px; height: 85px;") -> lanswer} </td>
                 </tr>
                 { nSurveyFormlet(copt,tl(textareaquestions),checkboxesqo) -> rest }      
             </#>
        yields
        (name = rest.name, listofvalues = (id = hd(textareaquestions).id, answer = lanswer, question = hd(textareaquestions).questioncontent)::rest.listofvalues, cbvalues = [])   
        }
    }
}

fun getSurvey(surveyselected)
{
	
	# I want a tuple all survey data
	if (length(surveyselected) > 0){
	var selectedsurveyid = hd(surveyselected);
	for (s <-- readysurveys)
  	where (s.id == stringToInt(selectedsurveyid))
    [("id"=s.id, "name"=s.name, "textareasno"=s.textareasno,
    "redirection"=s.redirection,"welcome"=s.welcome,"timetofill"=s.timetofill)]
    }
    else
    {
    []
    }
}

fun getCbQuestions(surveyId)
{
    for(cbquestion <- asList(readycheckboxquestions))
    where(cbquestion.surveyid == surveyId)
    [cbquestion]
}

fun getOptionsForQuestion(questionId)
{
    for(cboption <- asList(readycheckboxoptions))
    where(cboption.questionid == questionId)
    [("qoid"=cboption.id, "qotxt"=cboption.optioncontent)]
}

fun prepareCheckboxes(surveyId)
{
    
    if(surveyId <> 0)
    {
    var cbQuestions = getCbQuestions(surveyId);
    var outArray = for (singleQuestion <- cbQuestions)
    {
    var qo = getOptionsForQuestion(singleQuestion.id);
    [("qname"=singleQuestion.checkboxcontent,"qo"=qo)]
    };
    outArray
    }
    else
    {
    []
    }
}

fun main() {

 var env = environment();
 var srvopt = for ((x,y) <- env) where (x == "surveyId") [y]; 
 var srvnLst = getSurvey(srvopt);
 var selectedsrv = if (length(srvnLst) > 0)
 {
 	hd(srvnLst)
 }
 else
 {
 	("id"=0, "name"="takiegoimienianiktnienada", "textareasno"=0, "redirection"="nowhere", "welcome"="noone", "timetofill"=0)
 }; 

var surveyquestions = query { for (rquestion <-- textareas) where (rquestion.surveyid == selectedsrv.id) [rquestion] };

var checkboxes = prepareCheckboxes(selectedsrv.id);

var startValue = 1;

var p = page <table> { ( nSurveyFormlet(startValue,surveyquestions,checkboxes) ) => fun (r) {surveySummarize(r,selectedsrv.id,selectedsrv.name,selectedsrv.redirection)} } </table>;


#tutaj wrzucic ifa ktory sprawdzi ID surveya i tyle

if (selectedsrv.id == 0)
{

page
<html> 
 <title>SurveyFiller</title>
 <body bgcolor="#ffffff">    

 <h1>SurveyFiller</h1>

 <p>Please provide a proper survey ID as an HTML parameter. To do that you should have in your URL something like that: "survey-filler.links?surveyId=<em>yourSurveyId</em>".</p>
 <p> If you don't know what I'm talking about, then you haven't been invited to participate in this survey.</p>


</body>				  
</html>

}
else
{

page
<html> 
 <title>SurveyFiller</title>
 <body bgcolor="#ffffff">    

 <h1>{stringToXml(selectedsrv.name)}</h1>

 <p><i>{stringToXml(selectedsrv.welcome)}</i></p>
 <p><i>It shouldn't take you more than</i> {intToXml(selectedsrv.timetofill)} <i>minutes to fill it out.</i></p>

{|p|}


</body>				  
</html>

}



}

main()