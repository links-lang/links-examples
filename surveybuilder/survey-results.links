# This module is responsible for creation of the summary of the answers given by the respondents to date. For the given survey (ID passed as an HTML parameter) the module downloads all the answers to the questions and displays it in a form of table. For open questions in the row above there is a question content and in the row below there are all the answers. For the 'checkbox type' questions, there is a question content in the upper row and all possible answers together with their number of selections in a lower row. 

# Variables used in database operations.

var db = database "surveybuilder";

var readysurveys =
    table "surveys"
    with (id : Int,
	  name : String,
	  textareasno : Int
    	  ) from db;

var questions =
	table "textareas"
    with (
      id : Int,
	  surveyid : Int,
	  questioncontent : String
    	  ) from db;

var answers =
	table "textareaentries"
	with
	(
	id : Int,
	textareaid : Int,
	respondendid : Int,
	answer : String
	) from db;

var cbquestions =
	table "checkboxquestions"
    with (
    id : Int,
    surveyid : Int,
    checkboxcontent : String
    ) from db;

var cbanswers =
	table "checkboxoptions"
    with (
    id : Int,
    questionid : Int,
    optioncontent : String
    ) from db;

var cbentries =
	table "checkboxentries"
    with (
    id : Int,
    optionid : Int,
    respondendid : Int,
    optionvalue : Int
    ) from db;

sig showResult : (String,[String]) ~> Xml
fun showResult(msg,r) {
<#>
  <tr><td width="500"><b>{stringToXml(msg)}</b></td></tr>
  <tr><td><ul>{for (x <- r) where (x <> "") <li>{stringToXml(x)}</li>}</ul></td></tr>
</#>
}

fun showCbResult(msg,r) {
<#>
  <tr><td width="500"><b>{stringToXml(msg)}</b></td></tr>
  <tr><td><ul>{for (x <- r) where (x.txt <> "") <li>{stringToXml(x.txt)} <font color="blue"> (selected by {intToXml(x.no)} respondents)</font></li>}</ul></td></tr>
</#>
}


fun getQuestions(surveyId)
{
	query { 
	for (rquestion <-- questions) where (rquestion.surveyid == surveyId) 
	[rquestion] 
	}
}

fun getAnswers(questionId)
{
	for (tmpanswer <- query { 
	for (ranswer <-- answers) where (ranswer.textareaid == questionId) 
	[ranswer] 
	})
	{
	[tmpanswer.answer]
	}
}

fun getCbQuestions(surveyId)
{
	query { 
	for (rquestion <-- cbquestions) where (rquestion.surveyid == surveyId) 
	[rquestion] 
	}
}

fun getCbAnswers(questionId)
{
	for (tmpcbanswer <- query { 
	for (ranswer <-- cbanswers) where (ranswer.questionid == questionId) 
	[ranswer] 
	})
	{
	[("no" = getCbOptionNumber(tmpcbanswer.id), "txt" = tmpcbanswer.optioncontent)]
	}
}

fun getCbOptionNumber(optionId)
{
	var entries = query {
	for (rentry <-- cbentries) where (rentry.optionid == optionId && rentry.optionvalue == 1) 
	[rentry] 
	};
	var numberOfEntries = length(entries);
	var outString = "jakis tekst"^^" -> selected by "^^intToString(numberOfEntries)^^" respondents";
	numberOfEntries
}

fun getSurvey(surveyselected)
{
	
	if (length(surveyselected) > 0){
	var selectedsurveyid = hd(surveyselected);
	for (s <-- readysurveys)
  	where (s.id == stringToInt(selectedsurveyid))
    [("id"=s.id, "name"=s.name, "textareasno"=s.textareasno)]
    }
    else
    {
    []
    }
}

fun main() {

var env = environment();
var srvopt = for ((x,y) <- env) where (x == "surveyId") [y]; 
var srvnLst = getSurvey(srvopt);
var selectedsrv = if (length(srvnLst) > 0)
 {
 	hd(srvnLst)
 }
 else
 {
 	("id"=0, "name"="takiegoimienianiktnienada", "textareasno"=0)
 }; 



if (selectedsrv.id == 0)
{

page
<html> 
 <title>SurveyResultsAnalyzer</title>
 <body bgcolor="#ffffff">    

 <h1>Welcome to the survey results analyzer module of the SurveyBuilder application !</h1>

<p>To see the results of the survey you have to provide a proper survey ID as an HTML parameter. To do that you should have in your URL something like that: "survey-results.links?surveyId=<em>yourSurveyId</em>".</p>
<p>To go back to the SurveyBuilder survey management system click <a href="surveybuilder.links">here</a>.</p>
 
   
</body>				  
</html>

}
else
{

page
<html> 
 <title>SurveyResultsAnalyzer</title>
 <body bgcolor="#ffffff">    

 <h1>{stringToXml(selectedsrv.name)}</h1>

   <p>This is an anonymized summary of the results (to date).</p>

<table border="2">
{
	var qstns = getQuestions(selectedsrv.id);
	for (singlequestion <- qstns) {
	showResult(singlequestion.questioncontent,getAnswers(singlequestion.id))
	}
	
}
{
	var cbqstns = getCbQuestions(selectedsrv.id);
	for (singlecb <- cbqstns) {
	showCbResult(singlecb.checkboxcontent,getCbAnswers(singlecb.id))
	}
}
</table>

<p>To go back to the SurveyBuilder survey management system click <a href="surveybuilder.links">here</a>.</p>

</body>				  
</html>

}
}

main()